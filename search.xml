<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>个人账号汇总</title>
    <url>/archives/539913bf.html</url>
    <content><![CDATA[<p><a href="https://www.zcutie.cn/">Zcutie导航栏</a></p>
<ul>
<li>书签导航栏聚合</li>
<li>一些常用、有用网址的收藏</li>
</ul>
<p><a href="https://zcutie.zcutie0201.repl.co/">Zcutie Alist资源分享库</a></p>
<ul>
<li>每次进入页面时加载缓慢</li>
<li>走浏览器下载，速度取决于带宽</li>
<li>有对应的说明</li>
</ul>
<p><a href="https://zcutie.notion.site/Zcutie-715e46e8407a4b55ba08e1d0a295c238?pvs=4">Notion笔记</a></p>
<ul>
<li>收集的一些notion模板</li>
<li>一些笔记、教程以及软件</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Android系统之开机亮度需求</title>
    <url>/archives/327c0f33.html</url>
    <content><![CDATA[<p>修改Android开机动画结束后到加载Launcher页面时android加载条出现亮度变化问题<br>一开始从上层入手，怀疑有app或者窗口对其进行了修改</p>
<h1 id="追踪代码方法"><a href="#追踪代码方法" class="headerlink" title="追踪代码方法"></a>追踪代码方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//打印堆栈信息查看调用者</span><br>android.util.Log.i(TAG,<span class="hljs-string">&quot;updateDisplayPowerStateLocked() &quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>());<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Android</tag>
        <tag>需求</tag>
      </tags>
  </entry>
  <entry>
    <title>Android SystemUI之Recents近期任务部分</title>
    <url>/archives/86ca21a1.html</url>
    <content><![CDATA[<ul>
<li><input disabled="" type="checkbox"> EventBus未掌握</li>
<li><input disabled="" type="checkbox"> 事件的处理具体流程未解</li>
</ul>
<h1 id="启动之预加载"><a href="#启动之预加载" class="headerlink" title="启动之预加载"></a>启动之预加载</h1><p>从状态栏上的recent图标入手</p>
<h2 id="StatusBar-java"><a href="#StatusBar-java" class="headerlink" title="StatusBar.java"></a>StatusBar.java</h2><p>statusbar上设置recentbutton</p>
<h3 id="makeStatusBarView"><a href="#makeStatusBarView" class="headerlink" title="makeStatusBarView()"></a>makeStatusBarView()</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeStatusBarView</span><span class="hljs-params">()</span>&#123;<br>    ...<br>    <span class="hljs-keyword">if</span>(StatusBar.atcEnhancementSupport())&#123;<br>        setRecentsButton();<br>        ...    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="setRecentsButton"><a href="#setRecentsButton" class="headerlink" title="setRecentsButton()"></a>setRecentsButton()</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRecentsButton</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">if</span>(mStatusBarView!=<span class="hljs-literal">null</span>&amp;&amp;getStatusBarViewRecentsButton()!=<span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//判断状态栏是否为空以及状态栏是否有添加近期任务的控件</span><br>        getStatusBarViewRecentsButton().setOnClickListener(mRecentsClickListener);<span class="hljs-comment">//添加点击监听事件</span><br>        getStatusBarViewRecentsButton().setOnTouchListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnTouchListener()&#123;<span class="hljs-comment">//添加触摸监听事件</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onTouch</span><span class="hljs-params">(View v,MotionEvent event)</span>&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">action</span> <span class="hljs-operator">=</span> event.getAction()&amp;MotionEvent.ACTION_MASK;<br>                <span class="hljs-keyword">if</span>(action == MotionEvent.ACTION_DOWN)&#123;<br>                    mCommandQueue.preloadRecentApps();<span class="hljs-comment">//预加载近期任务</span><br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(action == MotionEvent.ACTION_CANCEL)&#123;<br>                    mCommandQueue.cancelPreloadRecentApps();                <br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(action == MotionEvent.ACTION_UP)&#123;<br>                    <span class="hljs-keyword">if</span>(!v.isPressed())&#123;<br>                        mCommandQueue.cancelPreloadRecentApps();                    <br>                    &#125;                <br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h5 id="mRecentsClickListener"><a href="#mRecentsClickListener" class="headerlink" title="mRecentsClickListener"></a>mRecentsClickListener</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> View.<span class="hljs-type">OnClickListener</span> <span class="hljs-variable">mRecentsClickListener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener()&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span>&#123;<br>        awakenDreams();<br>        mCommandQueue.toggleRecentApps();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="CommandQueue-java"><a href="#CommandQueue-java" class="headerlink" title="CommandQueue.java"></a>CommandQueue.java</h2><h3 id="toggleRecentApps"><a href="#toggleRecentApps" class="headerlink" title="toggleRecentApps()"></a>toggleRecentApps()</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toggleRecentApps</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">synchronized</span>(mLock)&#123;<br>        mHandler.removeMessages(MSG_TOGGLE_RECENT_APPS); <span class="hljs-comment">//移除之前的，确保消息最新</span><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> mHandler.obtainMessage(MSG_TOGGLE_RECENT_APPS,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-literal">null</span>);<span class="hljs-comment">//发送消息，自己接收并处理</span><br>        msg.setAsynchronous(<span class="hljs-literal">true</span>);<br>        msg.sendToTarget();<br>    &#125;<br>&#125;<br>....<br><span class="hljs-keyword">case</span> MSG_TOGGLE_RECENT_APPS:<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>; i&lt;mCallbacks.size();i++)&#123;<br>        mCallbacks.get(i).toggleRecentApps();<span class="hljs-comment">//在Recents.java中调用toggleRecentApps</span><br>    &#125;<br>    <span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure>

<h4 id="toggleRecentApps-1"><a href="#toggleRecentApps-1" class="headerlink" title="toggleRecentApps()"></a>toggleRecentApps()</h4><p>Recents.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toggleRecentApps</span><span class="hljs-params">()</span>&#123;<br>    ....<br>    <span class="hljs-type">int</span> <span class="hljs-variable">currentUser</span> <span class="hljs-operator">=</span> sSystemServicesProxy.getCurrentUser();<br>    <span class="hljs-keyword">if</span>(sSystemServicesProxy.isSystemUser(currentUser))&#123;<br>        mImpl.toggleRecents(growTarget);    <br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        ...    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h5 id="toggleRecents"><a href="#toggleRecents" class="headerlink" title="toggleRecents()"></a>toggleRecents()</h5><p>RecentsImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toggleRecents</span><span class="hljs-params">(<span class="hljs-type">int</span> growTarget)</span>&#123;<br>    ...<br>    <span class="hljs-comment">//start the recents activity,启动近期任务</span><br>    ActivityManager.<span class="hljs-type">RunningTaskInfo</span> <span class="hljs-variable">runningTask</span> <span class="hljs-operator">=</span> ssp.getRunningTask();<br>    startRecentsActivity(runningTask,isHomeStackVisible.value,<span class="hljs-literal">true</span>,growTarget);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="preloadRecentApps"><a href="#preloadRecentApps" class="headerlink" title="preloadRecentApps()"></a>preloadRecentApps()</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preloadRecentApps</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">synchronized</span>(mLock)&#123;<br>        mHandler.removeMessages(MSG_PRELOAD_RECENT_APPS);<br>        mHandler.obtainMessage(MSG_PRELOAD_RECENT_APPS,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-literal">null</span>).sendToTarget();<br>    &#125;<br>&#125;<br>...<br><span class="hljs-keyword">case</span> MSG_PRELOAD_RECENT_APPS:<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>; i&lt;mCallbacks.size();i++)&#123;<br>        mCallbacks.get(i).preloadRecentApps();<span class="hljs-comment">//在主线程回调</span><br>    &#125;<br>    <span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure>

<h2 id="Recents-java"><a href="#Recents-java" class="headerlink" title="Recents.java"></a>Recents.java</h2><p>在systemui启动的时候，就通过SystemUIApplication.java中的mService[i].start()对Recents.java进行初始化</p>
<h3 id="preloadRecentApps-1"><a href="#preloadRecentApps-1" class="headerlink" title="preloadRecentApps()"></a>preloadRecentApps()</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preloadRecentApps</span><span class="hljs-params">()</span>&#123;<br>    ...<br>    <span class="hljs-type">int</span> <span class="hljs-variable">currentUser</span> <span class="hljs-operator">=</span> sSystemServicesProxy.getCurrentUser();<br>    <span class="hljs-keyword">if</span> (sSystemServicesProxy.isSystemUser(currentUser)) &#123;<span class="hljs-comment">//系统用户</span><br>        mImpl.preloadRecents();<span class="hljs-comment">//RecentsImpl.java</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (mSystemToUserCallbacks != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">IRecentsNonSystemUserCallbacks</span> <span class="hljs-variable">callbacks</span> <span class="hljs-operator">=</span><br>                mSystemToUserCallbacks.getNonSystemUserRecentsForUser(currentUser);<br>        <span class="hljs-keyword">if</span> (callbacks != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                callbacks.preloadRecents();<br>            &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>                Log.e(TAG, <span class="hljs-string">&quot;Callback failed&quot;</span>, e);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;No SystemUI callbacks found for user: &quot;</span> + currentUser);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="RecentsImpl-java"><a href="#RecentsImpl-java" class="headerlink" title="RecentsImpl.java"></a>RecentsImpl.java</h2><h3 id="preloadRecents"><a href="#preloadRecents" class="headerlink" title="preloadRecents()"></a>preloadRecents()</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preloadRecents</span><span class="hljs-params">()</span>&#123;<br>    ...<br>    mHandler.post(()-&gt;&#123;<br>        ...<br>        <span class="hljs-type">RecentsTaskLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> Recents.getTaskLoader();<span class="hljs-comment">//获取Recents.start()中初始化的RecentsTaskLoader对象</span><br>        sInstanceLoadPlan = loader.createLoadPlan(mContext);<span class="hljs-comment">//返回RecentsTaskLoadPlan对象</span><br>        loader.preloadTasks(sInstanceLoadPlan,runningTask.id,!isHomeStackVisible.value);<span class="hljs-comment">//调用RecentsTaskLoadPlan的preloadPlan()方法预加载所有近期任务，并存入TaskStack中,初始化mStack(TaskStack)</span><br>        <span class="hljs-type">TaskStack</span> <span class="hljs-variable">stack</span> <span class="hljs-operator">=</span> sInstanceLoadPlan.getTaskStack();<span class="hljs-comment">//获取上面初始化的mStack</span><br>        <span class="hljs-keyword">if</span>(stack.getTaskCount()&gt;<span class="hljs-number">0</span>)&#123;<br>            preloadIcon(runningTask.id);<br>            updateHeaderBarLayout(stack,<span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="preloadTasks"><a href="#preloadTasks" class="headerlink" title="preloadTasks()"></a>preloadTasks()</h4><p>RecentsTaskLoader.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preloadTasks</span><span class="hljs-params">(RecentsTaskLoadPlan plan,<span class="hljs-type">int</span> runningTaskId,<span class="hljs-type">boolean</span> includeFrontMostExcludedTask)</span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        plan.preloadPlan(<span class="hljs-built_in">this</span>,runningTaskId,includeFrontMostExcludedTask);    <br>    &#125;<span class="hljs-keyword">finally</span>&#123;<br>        Trace.endSection();    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h5 id="preloadPlan"><a href="#preloadPlan" class="headerlink" title="preloadPlan()"></a>preloadPlan()</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">preloadPlan</span><span class="hljs-params">(RecentsTaskLoader loader,<span class="hljs-type">int</span> runningTaskId,<span class="hljs-type">boolean</span> includeFrontMostExcludedTask)</span>&#123;<br>    ...<br>    <span class="hljs-keyword">if</span>(mRawTasks == <span class="hljs-literal">null</span>)&#123;<br>        preloadRawTasks(includeFrontMostExcludedTask);    <br>    &#125;<br>    ...<br>    <span class="hljs-type">int</span> <span class="hljs-variable">taskCount</span> <span class="hljs-operator">=</span> mRawTasks.size();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; taskCount; i++)&#123;<br>        ActivityManager.<span class="hljs-type">RecentTaskInfo</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> mRawTasks.get(i);<br>        Task.<span class="hljs-type">TaskKey</span> <span class="hljs-variable">taskKey</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>.TaskKey(t.persistentId,t.stackId,t.baseIntent<br>                                    t.userId,t.firstActiveTime,t.lastActiveTime);<span class="hljs-comment">//为task生成taskKey</span><br>    &#125;<br>    ...<br>    <span class="hljs-type">ActivityInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> loader.getAndUpdateActivityInfo(taskKey);<span class="hljs-comment">//通过taskKey获取活动信息</span><br>    <span class="hljs-comment">/*加载图标、标题、颜色等信息*/</span><br>    <span class="hljs-type">Task</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>(taskKey,t.affiliatedTaskId, t.affiliatedTaskColor, icon,<br>        thumbnail, title, titleDescription, dismissDescription, appInfoDescription,<br>        activityColor, backgroundColor, isLaunchTarget, isStackTask, isSystemApp,<br>        t.supportsSplitScreenMultiWindow, t.bounds, t.taskDescription, t.resizeMode, t.topActivity,<br>        isLocked);<span class="hljs-comment">//新生成task，将获取的信息加载进去</span><br>        <span class="hljs-comment">/*将生成的task添加到allTasks栈中*/</span><br>    allTasks.add(task);<br>    affiliatedTaskCounts.put(taskKey.id, affiliatedTaskCounts.get(taskKey.id, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>    affiliatedTasks.put(taskKey.id, taskKey);<br>    ...<br>    mStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskStack</span>();<br>    mStack.setTasks(mContext,allTasks,<span class="hljs-literal">false</span>);<span class="hljs-comment">//一次性设置多个任务</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>preloadRawTasks()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">preloadRawTasks</span><span class="hljs-params">(<span class="hljs-type">boolean</span> includeFrontMostExcludedTask)</span> &#123;<br>    <span class="hljs-type">SystemServicesProxy</span> <span class="hljs-variable">ssp</span> <span class="hljs-operator">=</span> Recents.getSystemServices();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">currentUserId</span> <span class="hljs-operator">=</span> ssp.getCurrentUser();<br>    updateCurrentQuietProfilesCache(currentUserId);<br>    mPreloadedUserId = currentUserId;<br>    mRawTasks = ssp.getRecentTasks(ActivityManager.getMaxRecentTasksStatic(),<br>            currentUserId, includeFrontMostExcludedTask, mCurrentQuietProfiles);<br>    <span class="hljs-comment">// Since the raw tasks are given in most-recent to least-recent order, we need to reverse it</span><br>    Collections.reverse(mRawTasks);<br>&#125;<br></code></pre></td></tr></table></figure>

<h6 id="setTasks"><a href="#setTasks" class="headerlink" title="setTasks()"></a>setTasks()</h6><p>当stack中的任务发生变化时调用(remove、add)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTasks</span><span class="hljs-params">(Context context,List&lt;Task&gt; tasks,<span class="hljs-type">boolean</span> notifyStackChanges)</span>&#123;<br>    ...<br>    <span class="hljs-type">int</span> <span class="hljs-variable">removedTaskCount</span> <span class="hljs-operator">=</span> removedTasks.size();<br>    <span class="hljs-type">Task</span> <span class="hljs-variable">newFrontMostTask</span> <span class="hljs-operator">=</span> getStackFrontMostTask(<span class="hljs-literal">false</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;i&lt;removedTaskCount;i++)&#123;<br>        mCb.onStackTaskRemoved(<span class="hljs-built_in">this</span>,removedTasks.get(i),newFrontMostTask,AnimationProps.IMMEDIATE,<span class="hljs-literal">false</span>,<span class="hljs-literal">true</span>);    <br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">addedTaskCount</span> <span class="hljs-operator">=</span> addedTasks.size();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; addedTaskCount;i++)&#123;<br>        mCb.onStackTaskAdded(<span class="hljs-built_in">this</span>,addedTasks.get(i));    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><h2 id="RecentsImpl-java-1"><a href="#RecentsImpl-java-1" class="headerlink" title="RecentsImpl.java"></a>RecentsImpl.java</h2><h3 id="startRecentsActivity"><a href="#startRecentsActivity" class="headerlink" title="startRecentsActivity()"></a>startRecentsActivity()</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startRecentsActivity</span><span class="hljs-params">(ActivityManager.RunningTaskInfo runningTask,</span><br><span class="hljs-params">        <span class="hljs-type">boolean</span> isHomeStackVisible,<span class="hljs-type">boolean</span> animate,<span class="hljs-type">int</span> growTarget)</span>&#123;<br>            ...<br>            <span class="hljs-keyword">if</span>(!animate)&#123;<span class="hljs-comment">//传入过来的时候animate=true，所以不执行</span><br>                startRecentsActivity(ActivityOptions.makeCustomAnimation(mContext,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>),<span class="hljs-literal">null</span>);<br>                <span class="hljs-keyword">return</span> ;            <br>            &#125;<br>            Pair&lt;ActivityOptions,AppTransitionAnimationSpecsFuture&gt; pair;<br>            <span class="hljs-keyword">if</span>(isBlacklisted)&#123;<br>                pair = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>&lt;&gt;(getUnknowTransitionActivityOptions(),<span class="hljs-literal">null</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(useThumbnailTransition)&#123;<br>                pair = getThumbnailTransitionActivityOptions(runningTask,windowOverrideRect);            <br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                pair = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>&lt;&gt;(hasRecentTasks?getHomeTransitionActivityOptions():getUnknownTransitionActivityOptions(),<span class="hljs-literal">null</span>);            <br>            &#125;<br>            startRecentsActivity(pair.first,pair.second);<br>        &#125;<br></code></pre></td></tr></table></figure>

<h4 id="startRecentsActivity-1"><a href="#startRecentsActivity-1" class="headerlink" title="startRecentsActivity()"></a>startRecentsActivity()</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">RECENTS_PACKAGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.android.systemui&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">RECENTS_ACTIVITY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.android.systemui.recents.RecentsActivity&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startRecentsActivity</span><span class="hljs-params">(ActivityOptions opts,<span class="hljs-keyword">final</span> AppTransitionAnimationSpecsFuture future)</span>&#123;<br>    <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();<br>    intent.setClassName(RECENTS_PACKAGE,RECENTS_ACTIVITY);<br>    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK<br>            |Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS<br>            |Intent.FLAG_ACTIVITY_TASK_ON_HOME);<br>    <span class="hljs-type">HidePipMenuEvent</span> <span class="hljs-variable">hideMenuEvent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HidePipMenuEvent</span>();<br>    hideMenuEvent.addPostAnimationCallback(()-&gt;&#123;<br>        Recents.getSystemServices().startActivityAsUserAsync(intent,opts);<br>        EventBus.getDefault().send(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RecentsActivityStartingEvent</span>());<br>        <span class="hljs-keyword">if</span>(future!=<span class="hljs-literal">null</span>)&#123;<br>            future.precacheSpecs();        <br>        &#125;<br>    &#125;);<br>    EventBus.getDefault().send(hideMenuEvent);<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="RecentsActivity-java"><a href="#RecentsActivity-java" class="headerlink" title="RecentsActivity.java"></a>RecentsActivity.java</h2><h3 id="onCreate"><a href="#onCreate" class="headerlink" title="onCreate()"></a>onCreate()</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span>&#123;<br>    ...<br>    EventsBus.getDefault().register(<span class="hljs-built_in">this</span>,EVENT_BUS_PRIORITY);<span class="hljs-comment">//向EventBus注册此活动</span><br>    ...<br>    setContentView(R.layout.recents);<br>    takeKeyEvents(<span class="hljs-literal">true</span>);<br>    mRecentsView = findViewById(R.id.recents_view);<br>    ...<br>    <span class="hljs-comment">//Reload the stack view</span><br>    reloadStackView();<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="RecentView-java"><a href="#RecentView-java" class="headerlink" title="RecentView.java"></a>RecentView.java</h4><p>加载recents布局时调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecentsView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameLayout</span>&#123;<br>    <span class="hljs-keyword">private</span> TaskStackView mTaskStackView;<span class="hljs-comment">//近期任务视图</span><br>    <span class="hljs-keyword">private</span> TextView mStackActionButton;<span class="hljs-comment">//清空所有任务</span><br>    <span class="hljs-keyword">private</span> TextView mEmptyView;<span class="hljs-comment">//无近期任务时显示文本</span><br>    ...<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RecentsView</span><span class="hljs-params">(Context context,AttributeSet attrs,<span class="hljs-type">int</span> defStyleAttr,<span class="hljs-type">int</span> defStyleRes)</span>&#123;<br>        ...<br>        <span class="hljs-comment">//加载控件</span><br>        <span class="hljs-type">LayoutInflater</span> <span class="hljs-variable">inflater</span> <span class="hljs-operator">=</span> LayoutInflater.from(context);<br>        mEmptyView = (TextView) inflater.inflate(R.layout.recents_empty,<span class="hljs-built_in">this</span>,<span class="hljs-literal">false</span>);<br>        addView(mEmptyView);<br>        <span class="hljs-keyword">if</span>(RecentsDebugFlags.Static.EnableStackActionButton)&#123;<span class="hljs-comment">//true，执行</span><br>        <span class="hljs-keyword">if</span>(mStackActionButton!=<span class="hljs-literal">null</span>)&#123;<br>            removeView(mStackActionButton);<span class="hljs-comment">//移除视图</span><br>            &#125;<br>        mStackActionButton = (TextView) inflater.inflate(Recents.getConfiguration().isLowRamDevice<br>                                                ?R.layout.recents_low_raw_stack_action_button<br>                                                :R.layout.recents_stack_action_button,<br>                                                <span class="hljs-built_in">this</span>,<span class="hljs-literal">false</span>);<br>        &#125;<br>        ...<br>        addView(mStackActionButton);<br>    &#125;<br>    reevaluateStyles();<span class="hljs-comment">//适配更改style</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="reloadStackView"><a href="#reloadStackView" class="headerlink" title="reloadStackView()"></a>reloadStackView()</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reloadStackView</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">RecentsTaskLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> Recents.getTaskLoader();<br>    <span class="hljs-type">RecentsTaskLoadPlan</span> <span class="hljs-variable">loadPlan</span> <span class="hljs-operator">=</span> RecentsImpl.consumeInstanceLoadPlan();<br>    ...<br>    loader.loadTasks(<span class="hljs-built_in">this</span>,loadPlan,loadOpts);<br>    <span class="hljs-type">TaskStack</span> <span class="hljs-variable">stack</span> <span class="hljs-operator">=</span> loadPlan.getTaskStack();<br>    mRecentsView.onReload(stack,mIsVisible);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Android</tag>
        <tag>SystemUI</tag>
      </tags>
  </entry>
  <entry>
    <title>Android替换系统默认字体</title>
    <url>/archives/8e1dee1.html</url>
    <content><![CDATA[<h2 id="android系统默认字体分类"><a href="#android系统默认字体分类" class="headerlink" title="android系统默认字体分类"></a>android系统默认字体分类</h2><p>DroidSans.ttf  系统默认英文字体</p>
<p>DroidSans-Bold.ttf  系统默认英文粗字体</p>
<p>DroidSansFallback.ttf  系统默认中文字体</p>
<h2 id="为系统新增字体"><a href="#为系统新增字体" class="headerlink" title="为系统新增字体"></a>为系统新增字体</h2><p>1.复制字体到frameworks&#x2F;base&#x2F;data&#x2F;fonts</p>
<p><img src="/images/article/android_fonts/image-20230701102937779.png"></p>
<p>2.Android.mk中添加新增字体文件</p>
<p><img src="/images/article/android_fonts/image-20230701103117314.png"></p>
<p>3.验证是否可行</p>
<p>在frameworks&#x2F;base&#x2F;data&#x2F;fonts目录下mmm(有说用mm的，但是编译时报错)</p>
<p>编译完成之后，在out目录下&#x2F;system&#x2F;fonts中能看到新增的字体</p>
<h2 id="更改系统默认英文字体"><a href="#更改系统默认英文字体" class="headerlink" title="更改系统默认英文字体"></a>更改系统默认英文字体</h2><p>1.frameworks&#x2F;base&#x2F;data&#x2F;fonts目录下Android.mk文件中修改软链接</p>
<p><img src="/images/article/android_fonts/image-20230701103747407.png"></p>
<p>替换掉默认英文字体以及英文粗体</p>
<p>2.frameworks&#x2F;base&#x2F;data&#x2F;fonts目录下fonts.xml文件中修改默认设置</p>
<p><img src="/images/article/android_fonts/image-20230701103933417.png"></p>
<p>3.修改&#x2F;frameworks&#x2F;base&#x2F;rs&#x2F;java&#x2F;android&#x2F;renderscript&#x2F;Font.java中initFontFamilyMap函数</p>
<p><img src="/images/article/android_fonts/image-20230701104436650.png"></p>
<p>编译，刷机，成功替换</p>
<h2 id="更改系统默认中文字体"><a href="#更改系统默认中文字体" class="headerlink" title="更改系统默认中文字体"></a>更改系统默认中文字体</h2><p>修改font.xml中zh-Hans的配置</p>
<p><img src="/images/article/android_fonts/image-20230701150008362.png"></p>
<p>替换系统内&#x2F;system&#x2F;etc下的font.xml文件，重启，未生效！！！</p>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客文章设置</title>
    <url>/archives/b5d2d466.html</url>
    <content><![CDATA[<p>所有的格式都要注意空格，不然不会显示</p>
<p>文章内设置目录开启</p>
<p>toc: [true | false]</p>
<p>文章封面设置</p>
<p>image: #url: 设置图床图片 local: &#x2F;images目录下的路径</p>
<p>默认封面</p>
<p>zhaoo主题下默认封面设置</p>
<p>post_image:</p>
<p>  random: galleries #galleries 开启相册功能后自动调取 local 本地图库，需要新建&#x2F;_data&#x2F;local_images.json文件</p>
<p>  default: &#x2F;images&#x2F;theme&#x2F;post-image.jpg</p>
<p>local_images.json</p>
<p>[</p>
<p>图片的url链接</p>
<p>]</p>
<p>文章摘要</p>
<p>优化文章在首页的显示</p>
<p>excerpt:</p>
<p>文章标签</p>
<p>tags: [,]</p>
<p>文章分类</p>
<p>categories:</p>
<ul>
<li></li>
</ul>
<p>关键词</p>
<p>keywords: , ,</p>
<p>新建文章页面</p>
<p>hexo new “名称”</p>
<p>可以新建，直接放置在source文件夹下</p>
]]></content>
      <tags>
        <tag>博客</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>系统按键音处理流程</title>
    <url>/archives/e4af00e1.html</url>
    <content><![CDATA[<h1 id="声音"><a href="#声音" class="headerlink" title="声音"></a>声音</h1><p>系统按键音处理流程</p>
<p>因为系统关闭了按键提示音，但目前需求又需要开放</p>
<h2 id="相关文件查找"><a href="#相关文件查找" class="headerlink" title="相关文件查找"></a>相关文件查找</h2><h3 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h3><p>通过代码搜索“触摸提示音”，找到string对应的名称:“touch_sounds_title”，最后将文件定位到other_sound_settings.xml以及sound_settings.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Touch sounds --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">SwitchPreference</span></span><br><span class="hljs-tag">          <span class="hljs-attr">android:key</span>=<span class="hljs-string">&quot;touch_sounds&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;@string/touch_sounds_title&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="java文件"><a href="#java文件" class="headerlink" title="java文件"></a>java文件</h3><p>通过touch_sounds定位到文件TouchSoundPreferenceController.java</p>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="安卓设置中声音部分开启"><a href="#安卓设置中声音部分开启" class="headerlink" title="安卓设置中声音部分开启"></a>安卓设置中声音部分开启</h3><p>通过ARDC开启监测，定位到当前页面内的activity</p>
<p><img src="/images/article/touch_sound_effect/image-20230721113110142.png"></p>
<p>MtkSettings&#x2F;AndroidManifest.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">activity</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;Settings$SoundSettingsActivity&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:label</span>=<span class="hljs-string">&quot;@string/sound_settings&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:icon</span>=<span class="hljs-string">&quot;@drawable/ic_homepage_sound&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:taskAffinity</span>=<span class="hljs-string">&quot;com.android.settings&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:parentActivityName</span>=<span class="hljs-string">&quot;Settings&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span> <span class="hljs-attr">android:priority</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.android.settings.SOUND_SETTINGS&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.settings.SOUND_SETTINGS&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.settings.ACTION_OTHER_SOUND_SETTINGS&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.VOICE_LAUNCH&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.android.settings.SHORTCUT&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span> <span class="hljs-attr">android:priority</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.android.settings.action.SETTINGS&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.android.settings.category&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">android:value</span>=<span class="hljs-string">&quot;com.android.settings.category.ia.homepage&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.android.settings.FRAGMENT_CLASS&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:value</span>=<span class="hljs-string">&quot;com.android.settings.notification.SoundSettings&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.android.settings.PRIMARY_PROFILE_CONTROLLED&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.android.settings.summary&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:resource</span>=<span class="hljs-string">&quot;@string/sound_dashboard_summary&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>其中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.android.settings.FRAGMENT_CLASS&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:value</span>=<span class="hljs-string">&quot;com.android.settings.notification.SoundSettings&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>

<p>点击会跳转至该页面(fragment)，也就是SoundSettings页面</p>
<p>里面有各种声音相关的设置，其中TouchSoundPreferenceController就是触摸提示音相关</p>
<h4 id="TouchSoundPreferenceController"><a href="#TouchSoundPreferenceController" class="headerlink" title="TouchSoundPreferenceController"></a>TouchSoundPreferenceController</h4><p>Settings&#x2F;src&#x2F;com&#x2F;android&#x2F;settings&#x2F;notification&#x2F;TouchSoundPreferenceController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">TouchSoundPreferenceController</span><span class="hljs-params">(Context context, SettingsPreferenceFragment parent,</span><br><span class="hljs-params">            Lifecycle lifecycle)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, parent, lifecycle);<br>        mPreference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SettingPref</span>(<br>            TYPE_SYSTEM, KEY_TOUCH_SOUNDS, System.SOUND_EFFECTS_ENABLED, DEFAULT_ON) &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">setSetting</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Context context, <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> value)</span> &#123;<br>                AsyncTask.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                        <span class="hljs-keyword">final</span> <span class="hljs-type">AudioManager</span> <span class="hljs-variable">am</span> <span class="hljs-operator">=</span><br>                            (AudioManager) context.getSystemService(Context.AUDIO_SERVICE);<br>                        <span class="hljs-keyword">if</span> (value != <span class="hljs-number">0</span>) &#123;<br>                            am.loadSoundEffects();<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            am.unloadSoundEffects();<br>                        &#125;<br>                    &#125;<br>                &#125;);<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.setSetting(context, value);<br>            &#125;<br>        &#125;;<br>    &#125;<br></code></pre></td></tr></table></figure>

<p>先对System属性值赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">mPreference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SettingPref</span>(<br>            TYPE_SYSTEM, KEY_TOUCH_SOUNDS, System.SOUND_EFFECTS_ENABLED, DEFAULT_ON)&#123;&#125;;<br></code></pre></td></tr></table></figure>

<p>PS:使用adb获取按键提示音的状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">adb shell settings get system sound_effects_enabled<br></code></pre></td></tr></table></figure>

<p>监听按键的变化，来选择加载以及关闭提示音</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">am.loadSoundEffects();<br>am.unloadSoundEffects();<br></code></pre></td></tr></table></figure>

<p>进入framework层，调用系统服务等</p>
<h3 id="framework"><a href="#framework" class="headerlink" title="framework"></a>framework</h3><p>framework\base\media\java\android\media\AudioManager.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadSoundEffects</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">IAudioService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> getService();<span class="hljs-comment">//获取AudioService对象</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            service.loadSoundEffects();<span class="hljs-comment">//调用AudioService中方法</span><br>        &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>            <span class="hljs-keyword">throw</span> e.rethrowFromSystemServer();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> IAudioService <span class="hljs-title function_">getService</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (sService != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> sService;<br>        &#125;<br>        <span class="hljs-type">IBinder</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> ServiceManager.getService(Context.AUDIO_SERVICE);<span class="hljs-comment">//通过binder调用AudioService</span><br>        sService = IAudioService.Stub.asInterface(b);<br>        <span class="hljs-keyword">return</span> sService;<br>    &#125;<br></code></pre></td></tr></table></figure>

<p>framework\base\services\core\java\com\android\server\audio\AudioService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">loadSoundEffects</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">attempts</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>        <span class="hljs-type">LoadSoundEffectReply</span> <span class="hljs-variable">reply</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoadSoundEffectReply</span>();<br><br>        <span class="hljs-keyword">synchronized</span> (reply) &#123;<br>            sendMsg(mAudioHandler, MSG_LOAD_SOUND_EFFECTS, SENDMSG_QUEUE, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, reply, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">while</span> ((reply.mStatus == <span class="hljs-number">1</span>) &amp;&amp; (attempts-- &gt; <span class="hljs-number">0</span>)) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    reply.wait(SOUND_EFFECTS_LOAD_TIMEOUT_MS);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    Log.w(TAG, <span class="hljs-string">&quot;loadSoundEffects Interrupted while waiting sound pool loaded.&quot;</span>);<br>                    Thread.currentThread().interrupt();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> (reply.mStatus == <span class="hljs-number">0</span>);<br>    &#125;<br></code></pre></td></tr></table></figure>

<p>发送广播</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">sendMsg(mAudioHandler, MSG_LOAD_SOUND_EFFECTS, SENDMSG_QUEUE, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, reply, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure>

<p>内部处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AudioHandler</span> extend Handler&#123;<br>	...<br>	<span class="hljs-meta">@Override</span><br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(Message msg)</span>&#123;<br>		<span class="hljs-keyword">switch</span>(msg.what)&#123;<br>			<span class="hljs-keyword">case</span> MSG_LOAD_SOUND_EFFECTS:<br>				<span class="hljs-type">boolean</span> <span class="hljs-variable">loaded</span> <span class="hljs-operator">=</span> onLoadSoundEffects();<span class="hljs-comment">//调用方法，加载音效</span><br>                    <span class="hljs-keyword">if</span> (msg.obj != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-type">LoadSoundEffectReply</span> <span class="hljs-variable">reply</span> <span class="hljs-operator">=</span> (LoadSoundEffectReply)msg.obj;<br>                        <span class="hljs-keyword">synchronized</span> (reply) &#123;<br>                            reply.mStatus = loaded ? <span class="hljs-number">0</span> : -<span class="hljs-number">1</span>;<br>                            reply.notify();<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>同时也就是在这里，我找到了处理播放音效的方法，之前一直对System.SOUND_EFFECTS_ENABLED赋值不起作用，是该处将onPlaySoundEffect方法进行了屏蔽，放开，编译，刷机，成功，而且默认就是开启的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">case</span> MSG_PLAY_SOUND_EFFECT:<br>	onPlaySoundEffect(msg.arg1,msg.arg2);<br></code></pre></td></tr></table></figure>

<p>至于为什么会关闭&#x2F;隐藏该方法，之前合入三方应用的时候提过这个bug，开启之后会与其他应用冲突，所以选择了隐藏，触摸提示音时不走该方法</p>
<h1 id="待定"><a href="#待定" class="headerlink" title="待定"></a>待定</h1>]]></content>
      <tags>
        <tag>Android</tag>
        <tag>Settings</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Settings源码学习</title>
    <url>/archives/48670.html</url>
    <content><![CDATA[<h1 id="Android-Settings"><a href="#Android-Settings" class="headerlink" title="Android Settings"></a>Android Settings</h1><p>读源码，从AndroidManifest.xml文件入手，android版本8.0</p>
<h2 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">activity</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;Settings&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:taskAffinity</span>=<span class="hljs-string">&quot;com.android.settings.root&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">activity-alias</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;Settings&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:taskAffinity</span>=<span class="hljs-string">&quot;com.android.settings.root&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activity-alias</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">activity</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.SubSettings&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:taskAffinity</span>=<span class="hljs-string">&quot;com.android.settings&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:parentActivityName</span>=<span class="hljs-string">&quot;Settings&quot;</span>/&gt;</span><br>    ...<br></code></pre></td></tr></table></figure>

<p>1.主启动页面为Settings<br>2.通过taskAffinity将activity分为几个部分(Task)<br>com.android.settings.root<br>com.android.settings<br>与application一致的” “<br>com.android.settings.storage_wizard<br>3.通过:parentActivityName指定为某个Activity的逻辑子类<br>4.meta-data：<br>元数据，可以为application、activity、recevier等提供附加数据项<br>android:name：唯一名称<br>android:resource：对资源的引用，该资源ID可以通过该metaData.getInt()获得</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.app.shortcuts&quot;</span> <span class="hljs-attr">android.resource</span>=<span class="hljs-string">&quot;@xml/shortcuts&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>

<p>android:value：分配给该标签的值</p>
<p>获取元数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//SettingsActivity.java中的getMetaData()</span><br><span class="hljs-type">ActivityInfo</span> <span class="hljs-variable">ai</span> <span class="hljs-operator">=</span> getPackageManager().getActivityInfo(getComponentName(),PackageManager.GET_META_DATA);<br>mFragmentClass = ai.metaData.getString(META_DATA_KEY_FRAGMENT_CLASS);<br></code></pre></td></tr></table></figure>

<p>由于只看了xml文件，并不确定是否有使用其他属性配合实现效果(Intent.FLAG_ACTIVITY_NEW_TASK或者allowTaskReparenting)</p>
<h2 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Settings</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SettingsActivity</span>&#123;<br>    <span class="hljs-comment">/*静态内部类，且全部继承自SettingsActivity*/</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>1.没有实现内容，但继承自SettingsActivity，且SettingsActivity有实现内容<br>2.在点击其中一部分静态内部类时会跳转至其他java文件，说明会在其他具体的方法、广播以及activity时引入</p>
<h2 id="SettingsActivity"><a href="#SettingsActivity" class="headerlink" title="SettingsActivity"></a>SettingsActivity</h2><h3 id="onCreate"><a href="#onCreate" class="headerlink" title="onCreate"></a>onCreate</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedState)</span>&#123;<br>    ...<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">FeatureFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> FeatureFactory.getFactory(<span class="hljs-built_in">this</span>);<br>    mDashboardFeatureProvider = factory.getDashboardFeatureProvider(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-comment">//加载元数据，初始化字符串mFragmentClass</span><br>    getMetaData();<br>    ...<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ComponentName</span> <span class="hljs-variable">cn</span> <span class="hljs-operator">=</span> intent.getComponent();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> cn.getClassName();<br>    <span class="hljs-comment">//当前intent的类名与settings是否一致(意味着启动settings主页面)</span><br>    mIsShowingDashboard = className.equals(Settings.class.getName());<br>    <span class="hljs-comment">//通过mIsShowingDashboard来加载主页面的布局</span><br>    setContentView(mIsShowingDashboard?R.layout.settings_main_dashboard:R.layout.settings_main_prefs);<br>    ...<br>    <span class="hljs-comment">//如果之前已经启动过，有保存的状态和一些值，那么用它来进行初始化，而不是新建</span><br>    <span class="hljs-keyword">if</span>(savedState != <span class="hljs-literal">null</span>)&#123;<br>        setTitleFromIntent(intent);<br>        ArrayList&lt;DashboardCategory&gt; categories = savedState.getParcelableArrayList(SAVE_KEY_CATEGORIES);<br>        <span class="hljs-keyword">if</span>(categories != <span class="hljs-literal">null</span>)&#123;<br>            mCategories.clear();<br>            mCategories.addAll(categories);<br>            setTitleFromBackStack();        <br>        &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//否则就调用这个函数进行第一次页面的加载</span><br>            launchSettingFragment(initialFragmentName,isSubSettings,intent);        <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>1.进入一个Activity时，习惯性的按照生命周期进行查看，所以跳转到onCreate<br>2.之前没有细读，所以一直存在疑惑：为什么首次进入是执行launchSettingFragment()这个方法？<br>在onCreate()中对之前是否进行状态保存的值(savedState)进行了判断，不为空就意味着不是首次启动，可以拿之前保存的值来初始化，而我们第一次进入的时候是没有值的，所以才会执行launchSettingFragment()<br>3.R.layout.settings_main_dashboard是主页面</p>
<ul>
<li><input disabled="" type="checkbox"> R.layout.settings_main_prefs的作用&#x2F;模块</li>
</ul>
<h3 id="launchSettingFragment"><a href="#launchSettingFragment" class="headerlink" title="launchSettingFragment"></a>launchSettingFragment</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">launchSettingFragment</span><span class="hljs-params">(String initialFragmentName,<span class="hljs-type">boolean</span> isSubSettings,Intent intent)</span>&#123;<br>    <span class="hljs-keyword">if</span>(!mIsShowDashboard &amp;&amp; initialFragmentName != <span class="hljs-literal">null</span>)&#123;<br>        setTitleFromIntent(intent);<br>        <span class="hljs-type">Bundle</span> <span class="hljs-variable">initialArguments</span> <span class="hljs-operator">=</span> intent.getBundleExtra(EXTRA_SHOW_FRAGMENT_ARGUMENTS);<br>        switchToFragment(initialFragmentName,initialArguments,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,mInitialTitleResId,mInitialTitle,<span class="hljs-literal">false</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        mInitialTitleResId = R.string.dashboard_titlel<br>        <span class="hljs-title function_">switchToFragment</span><span class="hljs-params">(DashboardSummary.class.getName()</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,mInitialTitleResId,mInitialTitle,<span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>1.mIsShowDashboard为true，所以if不会执行，直接到else后面的语句<br>2.R.string.dashboard_title&#x3D;mInitialTitleResId&#x3D;&gt;“Settings”</p>
<ul>
<li><input disabled="" type="checkbox"> mInitialTitle&#x3D;null?</li>
</ul>
<h3 id="switchToFragment"><a href="#switchToFragment" class="headerlink" title="switchToFragment"></a>switchToFragment</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Fragment <span class="hljs-title function_">switchToFragment</span><span class="hljs-params">(String fragmentName,Bundle args,<span class="hljs-type">boolean</span> validate,<span class="hljs-type">boolean</span> addToBackStack,<span class="hljs-type">int</span> titleResId,CharSequence title,<span class="hljs-type">boolean</span> withTransition)</span>&#123;<br>    ...<br>    <span class="hljs-comment">//实例化DashboardSummary类，替换main_content</span><br>    <span class="hljs-type">Fragment</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> Fragment.instantiate(<span class="hljs-built_in">this</span>,fragmentName,args);<br>    <span class="hljs-type">FragmentTransaction</span> <span class="hljs-variable">transaction</span> <span class="hljs-operator">=</span> getFragmentManager().beginTransaction();<br>    transaction.replace(R.id.main_content, f);<br>    ...<br>    <span class="hljs-keyword">if</span>(titleResId &gt; <span class="hljs-number">0</span>)&#123;<br>        transcation.setBreadCrumbTitle(titleResId);            <br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(title != <span class="hljs-literal">null</span>)&#123;<br>        transcation.setBreadCrumbTitle(title);    <br>    &#125;<br>    transaction.commitAllowingStateLoss();<br>    getFragmentManager().executePendingTransactions();<br>    <span class="hljs-keyword">return</span> f;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>1.在Fragment.instantiate()中，完成DashboardSummary类的实例化，在这里进行数据的加载，并且替换掉main_content，呈现出进入的页面效果<br>2.设置标题的时候，会先对titleResId进行判断，如果没有再去判断title，由于之前找到title的时候只有定义并未赋值，推测应该为null，如果是进行初始化而非创建，title不会为null，但也不会调用launchSettingFragment，所以只会判断titleResId，且以它的值作为标题(搜索栏的hint提示)</p>
<ul>
<li><input disabled="" type="checkbox"> 3.getFragmentManager().executePendingTransactions()作用</li>
</ul>
<h2 id="DashboardSummary"><a href="#DashboardSummary" class="headerlink" title="DashboardSummary"></a>DashboardSummary</h2><h3 id="onAttach"><a href="#onAttach" class="headerlink" title="onAttach()"></a>onAttach()</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAttach</span><span class="hljs-params">(Context context)</span>&#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">SuggestionFeatureProvider</span> <span class="hljs-variable">suggestionFeatureProvider</span> <span class="hljs-operator">=</span> FeatureFactory<br>        .getFactory(context)<br>        .getSuggestionFeatureProvider(context);<br>    <span class="hljs-keyword">if</span>(suggestionFeatureProvider.isSuggestionEnable(context))&#123;<span class="hljs-comment">//true</span><br>    <span class="hljs-comment">//初始化mSuggestionControllerMixin，</span><br>        mSuggestionControllerMixin = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuggestionControllerMixin</span>(context, <span class="hljs-built_in">this</span> <span class="hljs-comment">/* host */</span>,<br>        getLifecycle(), suggestionFeatureProvider<br>        .getSuggestionServiceComponent());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>1.实际上是一个Fragment，继承自InstrumentedFragment，按照生命周期进行查看<br>2.suggestionFeatureProvider.isSuggestionEnable(context)实现类是SuggestionFeatureProviderImpl.java中，其最后返回的结果是以设备是否为低内存设备的结果进行取非</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSuggestionEnabled</span><span class="hljs-params">(Context context)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ActivityManager</span> <span class="hljs-variable">am</span> <span class="hljs-operator">=</span><br>            (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);<br>    <span class="hljs-keyword">return</span> !am.isLowRamDevice();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>3.在这里对mSuggestionControllerMixin进行了初始化，实例化一个SuggestionController对象，并添加了监听事件，在实例化SuggestionController对象时，新建了ServiceConnection对象管理服务连接与失去连接事件</p>
<h3 id="onCreate-1"><a href="#onCreate-1" class="headerlink" title="onCreate()"></a>onCreate()</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span>&#123;<br>    mDashboardFeatureProvider = FeatureFactory.getFactory(activity).getDashboardFeatureProvider(activity);<br>    <span class="hljs-comment">//开启一个后台工作线程</span><br>    mSummaryLoader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SummaryLoader</span>(activity,CategoryKey.CATEGORY_HOMEPAGE);<br>    <span class="hljs-comment">//开启一个异步任务</span><br>    mConditionManager = ConditionManager.get(activity, <span class="hljs-literal">false</span>);<br>    getLifecycle().addObserver(mConditionManager);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>

<p>1.CategoryKey.CATEGORY_HOMEPAGE定义在CategoryKey.java文件中(frameworks&#x2F;base&#x2F;packages&#x2F;SettingsLib&#x2F;src&#x2F;com&#x2F;android&#x2F;settingslib&#x2F;drawer&#x2F;CategoryKey.java)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Activities in this category shows up in Settings homepage</span><br><span class="hljs-comment">//显示在设置主页的活动，在AndroidManifest.xml中meta-data设置的一些活动</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CATEGORY_HOMEPAGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.android.settings.category.ia.homepage&quot;</span>;<br></code></pre></td></tr></table></figure>

<p>3.mConditionManager最终会实例化ConditionLoader类开启异步任务，去加载模块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//位于ConditionManager.java中，内部类</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConditionLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AsyncTask</span>&lt;Void,Void,ArrayList&lt;Condition&gt;&gt;&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> ArrayList&lt;Condition&gt; <span class="hljs-title function_">doInBackground</span><span class="hljs-params">(Void... params)</span> &#123;<br>    Log.d(TAG, <span class="hljs-string">&quot;loading conditions from xml&quot;</span>);<br>    ArrayList&lt;Condition&gt; conditions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    mXmlFile = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(mContext.getFilesDir(), FILE_NAME);<br>    <span class="hljs-keyword">if</span> (mXmlFile.exists()) &#123;<span class="hljs-comment">//如果xml文件存在，则读取</span><br>        readFromXml(mXmlFile, conditions);<br>    &#125;<br>    addMissingConditions(conditions);<span class="hljs-comment">//添加不在xml文件中的类</span><br>    <span class="hljs-keyword">return</span> conditions;<br>&#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPostExecute</span><span class="hljs-params">(ArrayList&lt;Condition&gt; conditions)</span> &#123;<br>    Log.d(TAG, <span class="hljs-string">&quot;conditions loaded from xml, refreshing conditions&quot;</span>);<br>    mConditions.clear();<br>    mConditions.addAll(conditions);<br>    refreshAll();<span class="hljs-comment">//刷新</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li><input disabled="" type="checkbox"> 4.初始化的mSummaryLoader的作用</li>
</ul>
<h3 id="onCreateView"><a href="#onCreateView" class="headerlink" title="onCreateView()"></a>onCreateView()</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> View <span class="hljs-title function_">onCreateView</span><span class="hljs-params">(LayoutInflater inflater,ViewGroup container,Bundle bundle)</span>&#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">View</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> inflater.inflate(R.layout.dashboard, container, <span class="hljs-literal">false</span>);<br>    mDashboard = root.findViewById(R.id.dashboard_container);<br>    ...<br>    <span class="hljs-comment">/*对mDashboard进行一些初始化，如绑定布局、添加监听事件等*/</span><br>    <span class="hljs-comment">//设置适配器，添加数据</span><br>    mAdapter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DashboardAdapter</span>(getContext(),bundle,mConditionManager.getConditions(),mSuggestionControllerMixin,getLifecycle());<br>    mDashboard.setAdapter(mAdapter);<br>    ...<br>    rebuildUI();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>1.root加载的布局是拓展的RecycleView，并且布局文件只有它一个View，没有设置任何布局，是在java中动态添加的线性布局<br>2.所有的数据加载都是在DashboardAdapter中</p>
<h2 id="DashboardAdapter"><a href="#DashboardAdapter" class="headerlink" title="DashboardAdapter"></a>DashboardAdapter</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">DashboardAdapter</span><span class="hljs-params">(Context context,Bundle savedInstanceState,</span><br><span class="hljs-params">    List&lt;Condition&gt; conditions,SuggestionControllerMixin suggestionControllerMixin,</span><br><span class="hljs-params">    Lifecycle lifecycle)</span>&#123;<br>          ...<br>          mSuggestionAdapter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuggestionAdapter</span>(mContext,suggestionControllerMixin,<br>                  savedInstanceState,<span class="hljs-built_in">this</span>,lifecycle);<br>          ...<br>          mDashboardData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DashboardData</span>.Builder()<br>                          .setConditions(conditions)<br>                          .setSuggestions(mSuggestionAdapter.getSuggestions())<br>                          .setCategory(catrgory)<br>                          .setConditionExpanded(conditionExpanded)<br>                          .build();<br>    &#125;<br></code></pre></td></tr></table></figure>

<p>1.通过new SuggestionAdapter，和Lifecycle绑定，并初始化mSuggestionShowLogged&#x3D;new ArrayList&lt;&gt;()<br>2.mDashboardData为数据来源，通过DashboardData.Builder设置值，调用builf方法来创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> DashboardData <span class="hljs-title function_">build</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DashboardData</span>(<span class="hljs-built_in">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="DashboardData"><a href="#DashboardData" class="headerlink" title="DashboardData"></a>DashboardData</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-title function_">DashboardData</span><span class="hljs-params">(Builder builder)</span>&#123;<br>    ...<br>    buildItemsData();<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="buildItemsData"><a href="#buildItemsData" class="headerlink" title="buildItemsData()"></a>buildItemsData()</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildItemsData</span><span class="hljs-params">()</span>&#123;<br>    ...<br>    <span class="hljs-comment">//主页面搜索框下的条目呈现</span><br>    <span class="hljs-keyword">if</span>(mCategory != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">final</span> List&lt;Tile&gt; tiles = mCategory.getTiles();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tiles.size(); i++)&#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Tile</span> <span class="hljs-variable">tile</span> <span class="hljs-operator">=</span> tiles.get(i);<br>            addToItemList(tile,R.layout.dashboard_tile,Ojects.hash(tile.title),<span class="hljs-literal">true</span>);        <br>        &#125;    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>1.使用addToItemList对suggestions和conditions添加到mItem中</p>
<ul>
<li><input disabled="" type="checkbox"> mCategory的值在哪进行了设置</li>
</ul>
<p>数据加载，页面呈现流程走完，分析跳转子页面，以及子页面的逻辑</p>
]]></content>
      <tags>
        <tag>Android</tag>
        <tag>Settings</tag>
      </tags>
  </entry>
</search>
